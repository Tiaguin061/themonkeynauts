datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PlayerRole {
  ADMIN
  DEFAULT
}

enum SaleEventType {
  MONKEYNAUT
  SHIP
  PACK
}

model Log {
  id        String   @id @db.Uuid()
  playerId  String?  @db.Uuid()
  player    Player?  @relation(fields: [playerId], references: [id], onDelete: SetNull)
  action    String
  txHash    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("logs")
}

model Player {
  id            String     @id @db.Uuid()
  nickname      String     @unique
  email         String     @unique
  password      String
  wallet        String?    @unique
  role          PlayerRole @default(DEFAULT)
  hasAsteroid   Boolean    @default(false)
  canBountyHunt Boolean    @default(true)

  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playerTokens PlayerToken[]

  ownerMonkeynauts  Monkeynaut[] @relation("owner_monkeynauts")
  playerMonkeynauts Monkeynaut[] @relation("player_monkeynauts")

  resource Resource?

  ownerShips  Ship[] @relation("owner_ships")
  playerShips Ship[] @relation("player_ships")

  logs Log[]

  playerAuth    PlayerAuth[]  @relation("player_auth")
  private_sales PrivateSale[]

  @@map("players")
}

model PlayerToken {
  id        String   @id @db.Uuid()
  playerId  String   @db.Uuid()
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("player_tokens")
}

model Monkeynaut {
  id String @id @db.Uuid()

  owner   Player? @relation("owner_monkeynauts", fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId String? @db.Uuid()

  playerId String? @db.Uuid()
  player   Player? @relation("player_monkeynauts", fields: [playerId], references: [id], onDelete: SetNull)

  name             String
  class            String
  rank             String
  bonusValue       Int
  bonusDescription String
  maxEnergy        Int
  energy           Int
  avatar           String?

  basePower      Int
  baseSpeed      Int
  baseResistence Int
  baseHealth     Int

  power      Int
  speed      Int
  resistence Int
  health     Int

  breedCount Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  crews Crew[]

  @@map("monkeynauts")
}

model Resource {
  id       String @id @db.Uuid()
  playerId String @unique @db.Uuid()
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  spc     Int @default(0)
  gold    Int @default(0)
  iron    Int @default(0)
  copper  Int @default(0)
  scrap   Int @default(0)
  science Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resources")
}

model Ship {
  id String @id @db.Uuid()

  owner   Player? @relation("owner_ships", fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId String? @db.Uuid()

  player   Player? @relation("player_ships", fields: [playerId], references: [id], onDelete: SetNull)
  playerId String? @db.Uuid()

  name             String
  class            String
  rank             String
  bonusValue       Int
  bonusDescription String
  tankCapacity     Int
  fuel             Int
  crewCapacity     Int
  crew             Int

  avatar             String?
  breedCount         Int
  onSale             Boolean @default(false)
  canRefuelAtStation Boolean @default(false)

  crews Crew[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ships")
}

model Crew {
  id String @id @db.Uuid()

  ship   Ship   @relation(fields: [shipId], references: [id], onDelete: Cascade)
  shipId String @db.Uuid()

  monkeynaut   Monkeynaut @relation(fields: [monkeynautId], references: [id], onDelete: Cascade)
  monkeynautId String     @db.Uuid()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("crews")
}

model PlayerAuth {
  id String @id @db.Uuid()

  player   Player @relation("player_auth", fields: [playerId], references: [id], onDelete: Cascade)
  playerId String @db.Uuid()

  isLogged     Boolean @default(false)
  isValidToken Boolean @default(false)

  payload String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expireIn  DateTime

  @@map("player_auth")
}

model PrivateSale {
  id        String   @id @db.Uuid()
  playerId  String   @db.Uuid()
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  wallet    String
  txHash    String   @unique
  bnbAmount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("private_sales")
}

model SaleEvent {
  id String @id @db.Uuid()

  active Boolean @default(true)

  type SaleEventType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  monkeynautSale MonkeynautSale?
  shipSale       ShipSale?
  packSale       PackSale?

  @@map("sale_events")
}

model MonkeynautSale {
  id String @id @db.Uuid()

  crypto         String
  price          Float
  startDate      DateTime
  endDate        DateTime?
  quantity       Int
  totalUnitsSold Int @default(0)

  private  Float
  sargeant Float
  captain  Float
  major    Float

  saleEventId String @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  saleEvent SaleEvent? @relation(fields: [saleEventId], references: [id])

  @@map("monkeynaut_sales")
}

model ShipSale {
  id String @id @db.Uuid()

  crypto         String
  price          Float
  startDate      DateTime
  endDate        DateTime?
  quantity       Int
  totalUnitsSold Int @default(0)

  rank_b Float
  rank_a Float
  rank_s Float

  saleEventId String @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  saleEvent SaleEvent? @relation(fields: [saleEventId], references: [id])

  @@map("ship_sales")
}

model PackSale {
  id String @id @db.Uuid()

  crypto         String
  price          Float
  startDate      DateTime
  endDate        DateTime?
  quantity       Int
  totalUnitsSold Int @default(0)

  basic    Float
  advanced Float
  expert   Float

  saleEventId String @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  saleEvent SaleEvent? @relation(fields: [saleEventId], references: [id])
  @@map("pack_sales")
}
