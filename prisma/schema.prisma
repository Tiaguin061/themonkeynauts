datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PlayerRole {
  ADMIN
  DEFAULT
}

model Log {
  id        String   @id @db.Uuid()
  playerId  String   @db.Uuid()
  player    Player   @relation(fields: [playerId], references: [id], onDelete: SetNull)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("logs")
}

model Player {
  id            String     @id @db.Uuid()
  nickname      String     @unique
  email         String     @unique
  password      String
  wallet        String?    @unique
  role          PlayerRole @default(DEFAULT)
  hasAsteroid   Boolean    @default(false)
  canBountyHunt Boolean    @default(true)

  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playerTokens PlayerToken[]

  ownerMonkeynauts  Monkeynaut[] @relation("owner_monkeynauts")
  playerMonkeynauts Monkeynaut[] @relation("player_monkeynauts")

  resource Resource?

  ownerShips  Ship[] @relation("owner_ships")
  playerShips Ship[] @relation("player_ships")

  logs Log[]

  playerAuth    PlayerAuth[]  @relation("player_auth")
  transactions  Transaction[]
  private_sales PrivateSale[]

  @@map("players")
}

model PlayerToken {
  id        String   @id @db.Uuid()
  playerId  String   @db.Uuid()
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("player_tokens")
}

model Monkeynaut {
  id String @id @db.Uuid()

  owner   Player @relation("owner_monkeynauts", fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId String @db.Uuid()

  playerId String @db.Uuid()
  player   Player @relation("player_monkeynauts", fields: [playerId], references: [id], onDelete: SetNull)

  name       String
  class      String
  rank       String
  bonusValue Int
  bonus      String
  maxEnergy  Int
  energy     Int
  avatar     String?

  basePower      Int
  baseSpeed      Int
  baseResistence Int
  baseHealth     Int

  power      Int
  speed      Int
  resistence Int
  health     Int

  breedCount Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  crews Crew[]

  @@map("monkeynauts")
}

model Resource {
  id       String @id @db.Uuid()
  playerId String @unique @db.Uuid()
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  spc     Int @default(0)
  gold    Int @default(0)
  iron    Int @default(0)
  copper  Int @default(0)
  scrap   Int @default(0)
  science Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resources")
}

model Ship {
  id String @id @db.Uuid()

  owner   Player @relation("owner_ships", fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId String @db.Uuid()

  player   Player @relation("player_ships", fields: [playerId], references: [id], onDelete: SetNull)
  playerId String @db.Uuid()

  name             String
  class            String
  rank             String
  bonusValue       Int
  bonusDescription String
  tankCapacity     Int
  fuel             Int

  avatar     String?
  breedCount Int
  onSale     Boolean @default(false)

  crews Crew[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ships")
}

model Crew {
  id String @id @db.Uuid()

  ship   Ship   @relation(fields: [shipId], references: [id], onDelete: SetNull)
  shipId String @db.Uuid()

  monkeynaut   Monkeynaut @relation(fields: [monkeynautId], references: [id], onDelete: SetNull)
  monkeynautId String     @db.Uuid()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("crews")
}

model PlayerAuth {
  id String @id @db.Uuid()

  player   Player @relation("player_auth", fields: [playerId], references: [id], onDelete: SetNull)
  playerId String @db.Uuid()

  isLogged     Boolean @default(false)
  isValidToken Boolean @default(false)

  payload String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expireIn  DateTime

  @@map("player_auth")
}

model Transaction {
  id        String   @id @db.Uuid()
  wallet    String
  txHash    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player Player @relation(fields: [wallet], references: [wallet], onDelete: NoAction)

  @@map("transactions")
}

model PrivateSale {
  id        String   @id @db.Uuid()
  playerId  String   @db.Uuid()
  player    Player   @relation(fields: [playerId], references: [id], onDelete: SetNull)
  wallet    String
  bnbAmount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@map("private_sales")
}
